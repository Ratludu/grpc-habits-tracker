// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Habits_CreateHabit_FullMethodName = "/habits.Habits/CreateHabit"
	Habits_GetHabit_FullMethodName    = "/habits.Habits/GetHabit"
	Habits_ListHabit_FullMethodName   = "/habits.Habits/ListHabit"
	Habits_DeleteHabit_FullMethodName = "/habits.Habits/DeleteHabit"
)

// HabitsClient is the client API for Habits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HabitsClient interface {
	CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...grpc.CallOption) (*CreateHabitResponse, error)
	GetHabit(ctx context.Context, in *GetHabitRequest, opts ...grpc.CallOption) (*GetHabitResponse, error)
	ListHabit(ctx context.Context, in *ListHabitRequest, opts ...grpc.CallOption) (*ListHabitResponse, error)
	DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...grpc.CallOption) (*DeleteHabitResponse, error)
}

type habitsClient struct {
	cc grpc.ClientConnInterface
}

func NewHabitsClient(cc grpc.ClientConnInterface) HabitsClient {
	return &habitsClient{cc}
}

func (c *habitsClient) CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...grpc.CallOption) (*CreateHabitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHabitResponse)
	err := c.cc.Invoke(ctx, Habits_CreateHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsClient) GetHabit(ctx context.Context, in *GetHabitRequest, opts ...grpc.CallOption) (*GetHabitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHabitResponse)
	err := c.cc.Invoke(ctx, Habits_GetHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsClient) ListHabit(ctx context.Context, in *ListHabitRequest, opts ...grpc.CallOption) (*ListHabitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHabitResponse)
	err := c.cc.Invoke(ctx, Habits_ListHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsClient) DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...grpc.CallOption) (*DeleteHabitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHabitResponse)
	err := c.cc.Invoke(ctx, Habits_DeleteHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HabitsServer is the server API for Habits service.
// All implementations must embed UnimplementedHabitsServer
// for forward compatibility.
type HabitsServer interface {
	CreateHabit(context.Context, *CreateHabitRequest) (*CreateHabitResponse, error)
	GetHabit(context.Context, *GetHabitRequest) (*GetHabitResponse, error)
	ListHabit(context.Context, *ListHabitRequest) (*ListHabitResponse, error)
	DeleteHabit(context.Context, *DeleteHabitRequest) (*DeleteHabitResponse, error)
	mustEmbedUnimplementedHabitsServer()
}

// UnimplementedHabitsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHabitsServer struct{}

func (UnimplementedHabitsServer) CreateHabit(context.Context, *CreateHabitRequest) (*CreateHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHabit not implemented")
}
func (UnimplementedHabitsServer) GetHabit(context.Context, *GetHabitRequest) (*GetHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHabit not implemented")
}
func (UnimplementedHabitsServer) ListHabit(context.Context, *ListHabitRequest) (*ListHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHabit not implemented")
}
func (UnimplementedHabitsServer) DeleteHabit(context.Context, *DeleteHabitRequest) (*DeleteHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHabit not implemented")
}
func (UnimplementedHabitsServer) mustEmbedUnimplementedHabitsServer() {}
func (UnimplementedHabitsServer) testEmbeddedByValue()                {}

// UnsafeHabitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HabitsServer will
// result in compilation errors.
type UnsafeHabitsServer interface {
	mustEmbedUnimplementedHabitsServer()
}

func RegisterHabitsServer(s grpc.ServiceRegistrar, srv HabitsServer) {
	// If the following call pancis, it indicates UnimplementedHabitsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Habits_ServiceDesc, srv)
}

func _Habits_CreateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServer).CreateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Habits_CreateHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServer).CreateHabit(ctx, req.(*CreateHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Habits_GetHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServer).GetHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Habits_GetHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServer).GetHabit(ctx, req.(*GetHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Habits_ListHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServer).ListHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Habits_ListHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServer).ListHabit(ctx, req.(*ListHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Habits_DeleteHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServer).DeleteHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Habits_DeleteHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServer).DeleteHabit(ctx, req.(*DeleteHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Habits_ServiceDesc is the grpc.ServiceDesc for Habits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Habits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "habits.Habits",
	HandlerType: (*HabitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHabit",
			Handler:    _Habits_CreateHabit_Handler,
		},
		{
			MethodName: "GetHabit",
			Handler:    _Habits_GetHabit_Handler,
		},
		{
			MethodName: "ListHabit",
			Handler:    _Habits_ListHabit_Handler,
		},
		{
			MethodName: "DeleteHabit",
			Handler:    _Habits_DeleteHabit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
